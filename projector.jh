/**
* Entity Flux
*/
entity Demande {
	idTech Long required,
    domaine String,
    idDemande String,
    badge String,
    dateDemande Instant,
    statut Statut,
    flux Blob
}

entity MetaProduction {
	idTech Long,
	societe String,
    numContratLgbt String,
    numSous String
}

entity MetaRecouvrement {
	idTech Long,
	societe String,
    numSous String
}
entity MetaVie {
	idTech Long,
    numSous String
    numContratVie String
}
entity MetaSelMed {
	idTech Long,
    numSous String
    numDossier String
    nomAssure String
}
entity MetaSIRH {
	idTech Long,
    numBadge String
    numBadgeDest String
    nomCollab String
    prenomCollab String
    codeUO String
}
entity MetaCoheris {
	idTech Long,
	societe String,
    numSous String
    numGRC String
}
entity MetaReglement {
	idTech Long,
	societe String,
    numSinistre String,
    numContratLgbt String,
    numSous String
}
relationship OneToOne {
	MetaProduction{idTech} to Demande
}
relationship OneToOne {
    MetaRecouvrement{idTech} to Demande
}
relationship OneToOne {
    MetaReglement{idTech} to Demande
}
relationship OneToOne {
    MetaCoheris{idTech} to Demande
}
relationship OneToOne {
    MetaVie{idTech} to Demande
}
relationship OneToOne {
    MetaSelMed{idTech} to Demande
}
relationship OneToOne {
    MetaSIRH{idTech} to Demande
}
entity DocFlux {
	idEdition String,
	libelle String,
    modele String,
    famille String,
    version String
}
relationship ManyToMany {
	DocFlux{idEdition} to Demande{idDemande}
}
entity Audit {
	idAudit Long,
    idEdition Long,
    date Instant,
    badge String,
    action Action
}
enum Action {
	VISUALISATION, EDITION, BROUILLON, SUPPRESSION
}
enum Statut {
	A_FINALISER, BROUILLON, TERMINE
}
entity ParamDemande {
	idDemande String,
    fgcle Long,
    nomDataLoader Long,
    versionDataLoader String,
    nomModele Long,
    idModele Long,
    versionModele String,
    impression String,
    archivage String,
    interactive String,
    stockage String,
    hostCol String,
    impCentr String,
    instCol String,
    impHCentr String,
    lotCont String,
    dest String,
    triRegrouptBann String,
    regles Long,
    conditionnement String,
    periodicite String,
    flagMail String,
    description String,
    versionMo Long,
    queuesEaiIn String,
    queuesEaiOut String,
    libre2 Long,
    libre4 Long
}



// Set pagination options
// paginate JobHistory, Employee with infinite-scroll
// paginate Job with pagination

// Use Data Transfert Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
// service all with serviceImpl except Employee, Job

// Set an angular suffix
// angularSuffix * with mySuffix
